Enumeration
------------------------------------------------------------------------------------------------------------------------------------------------
1. An enumerations serve the purpose of representing a group of, named constants, in a programming language.
2. We have to extend Scala class called Enumeration
3. In Scala, there is no enum keyword unlike Java or C.
4. Every Enumeration constant represents an object of type Enumeration. Elements in Enumeration are ordered by ID and default value start from 0
5. ID value need not follow any order. It can have negative values too.
5. Enumeration values are defined as val members of the evaluation.
 - When we extended the Enumeration class, a lot of functions get inherited. ID is one among the them.
 - We can iterate the members.
 
 NOTE:
  - Enumeration objects expects all enums to have the SAME TYPE at runtime.
val no = Value(-100, 1)  // It expects String and will though error

//Extend Enumeration class. Main class will become of type Enumeration
object ABC extends Enumeration 
{
    type ABC = Value
      
    // Assigning values
    var first = Value(0, "Thriller")
    val second = Value("Horror")
    val third = Value("Comedy")
    val fourth = Value("Romance")
    first = Value(4, "Thriller1")  // This value is overriden. To access it we specified id as well
    val last = Value(10, "Drama")  // No need to follow ordering for ID assignment
    val no = Value(-100, "No Choice")  // ID value can be negative
      
    // Main method
    def main(args: Array[String])
    {
        println(s"Main Movie Genres = ${ABC.values}")  // Elemets are printed as per ascending oredr by ID values
        println(s"Main Movie Genres = ${ABC.first}")
        println(s"Main Movie Genres = ${ABC.first.id}")
        println(s"Main Movie Genres = ${ABC(0)}")
        println(s"Main Movie Genres = ${ABC(4)}")
        println(s"Main Movie Genres = ${ABC(10)}")
    }
}

Outcome
---------------------------------
Main Movie Genres = ABC.ValueSet(No Choice, Thriller, Horror, Comedy, Romance, Thriller1, Drama)
Main Movie Genres = Thriller1
Main Movie Genres = 4
Main Movie Genres = Thriller
Main Movie Genres = Thriller1
Main Movie Genres = Drama


------------------------------------------------------------------------------------------------------------------------------------------------------
Sealed : Trait/Abstrct class
------------------------------------------------------------------------------------------------------------------------------------------------------
1. Alternative to Enumeration.
1. A sealed trait/abstract class can be extended only in the same file as its declaration.
2. Since they can be only extended in a single file, the compiler knows every possible subtypes and can reason about it.

Advantage:
 1. As all subtypes are in same file, it allows Scala to do most of checks at compiler time itself.
 
Disadvantage:
 1. No way to traverse over

E.g - 1
sealed abstract class Furniture
case class Couch() extends Furniture
case class Chair() extends Furniture

def findPlaceToSit(piece: Furniture): String = piece match {
  case a: Couch => "Lie on the couch"
  //case b: Chair => "Sit on the chair"
}

findPlaceToSit(Couch())

NOTE:
1. Throws compile time error
match may not be exhaustive.
It would fail on the following input: Chair()
2. We can either go for SEALED TRAIT or SEALED Abstract class as per use. Major difference in abstract class can have parameters while trats cannot.

E.g-2 ( ONLY DIFFERENCE is we declared here as sealed trait. Here it don't make any differece as we are not passing any parameters to Furniture class in E.g-1)

sealed trait Furniture 
case class Couch() extends Furniture
case class Chair() extends Furniture

def findPlaceToSit(piece: Furniture): String = piece match {
  case a: Couch => "Lie on the couch"
  //case b: Chair => "Sit on the chair"
}

findPlaceToSit(Couch())
